/*
 * Copyright (c) 2023, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package cl.ravenhill.keen.operators.crossover

import cl.ravenhill.keen.genetic.Genotype
import cl.ravenhill.keen.genetic.genes.Gene
import cl.ravenhill.keen.operators.Alterer

/**
 * Interface defining the behavior for performing genetic crossover in evolutionary algorithms.
 *
 * Crossover is a fundamental genetic operator used in evolutionary algorithms, inspired by biological
 * reproduction. It combines the genetic information of two or more parent individuals to generate new
 * offspring individuals. The process involves selecting specific segments from parent genotypes and
 * combining them to produce offspring genotypes with traits inherited from each parent. This recombination
 * of genetic material is key to the exploration of the genetic search space and the generation of diverse
 * solutions.
 *
 * Implementing classes of this interface are responsible for defining the specific mechanics of the crossover
 * process, which can vary greatly depending on the problem being solved and the representation of the genetic
 * material.
 *
 * @property numOffspring The number of offspring to be produced in each crossover operation.
 * @property numParents The number of parent genotypes involved in the crossover.
 * @property chromosomeRate The rate at which chromosomes are selected for crossover.
 *
 * @param DNA The type of data that represents an individual's genotype.
 * @param G The specific type of [Gene] that encapsulates the [DNA] type data.
 *
 * @author <https://www.github.com/r8vnhill">Ignacio Slater M.</a>
 * @since 2.0.0
 * @version 2.0.0
 */
interface Crossover<DNA, G : Gene<DNA, G>> : Alterer<DNA, G> {

    val numOffspring: Int

    val numParents: Int

    val chromosomeRate: Double

    /**
     * Executes the crossover operation on the provided parent genotypes.
     *
     * This method is responsible for combining segments of genetic material from the parent genotypes
     * to produce new, potentially more fit offspring genotypes. The specific method of combination
     * (e.g., single-point crossover, uniform crossover) and the rules governing the process
     * are defined by the implementing class.
     *
     * @param parentGenotypes The list of parent genotypes to undergo crossover.
     * @return A list of offspring genotypes generated by the crossover operation.
     */
    fun crossover(parentGenotypes: List<Genotype<DNA, G>>): List<Genotype<DNA, G>>
}
