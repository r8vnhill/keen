/*
 * Copyright (c) 2023, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package cl.ravenhill.keen.prog.terminals

import cl.ravenhill.keen.prog.Environment


/**
 * Represents an ephemeral constant in a tree structure used for genetic programming.
 *
 * An ephemeral constant is a type of terminal node that generates a value on demand using a provided
 * generator function. The value is generated once and cached for subsequent accesses, making it
 * "ephemeral" or temporary for the duration of the instance's existence.
 *
 * @param T The type of value generated by this ephemeral constant.
 * @property generator A function that generates an instance of [T].
 *
 * @property value The generated value of this ephemeral constant. It is lazy-loaded and cached upon
 *                 the first access. Subsequent accesses will return the cached value.
 *
 * @constructor Creates an ephemeral constant that will generate its value when first accessed.
 *
 * @author <a href="https://www.github.com/r8vnhill">Ignacio Slater M.</a>
 * @since 2.0.0
 * @version 2.0.0
 */
data class EphemeralConstant<T>(val generator: () -> T) : Terminal<T> {

    val value: T by lazy { generator() }

    /**
     * Returns the string representation of the ephemeral constant's value.
     * @return A string depicting the current value.
     */
    override fun toString() = "$value"

    /**
     * Creates a new instance of [EphemeralConstant] with the same generator function.
     * @return A new [EphemeralConstant] instance.
     */
    override fun create() = EphemeralConstant(generator)

    /**
     * Invokes the ephemeral constant within a given environment, returning its value.
     * Since this is a terminal node, the list of arguments is not used.
     *
     * @param environment The environment in which this node is evaluated.
     * @param args The arguments provided to the node, which are ignored for terminals.
     * @return The generated value of the ephemeral constant.
     */
    override fun invoke(environment: Environment<T>, args: List<T>) = value
}
