/*
 * "Keen" (c) by R8V.
 * "Keen" is licensed under a
 * Creative Commons Attribution 4.0 International License.
 * You should have received a copy of the license along with this
 * work. If not, see <https://creativecommons.org/licenses/by/4.0/>.
 */


package cl.ravenhill.keen.util.logging

import cl.ravenhill.keen.shouldBeOfClass
import io.kotest.core.spec.style.FreeSpec
import io.kotest.matchers.shouldBe
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.list
import io.kotest.property.arbitrary.set
import io.kotest.property.arbitrary.string
import io.kotest.property.checkAll


class LoggerTest : FreeSpec({
    "A logger should" - {
        "be able to be obtained by name" {
            checkAll(Arb.uniqueStrings()) { names ->
                names.forEach { Logger.instance(it) }
                Logger.activeLoggers.size shouldBe names.size
                names.forEach { Logger.activeLoggers[it] shouldBe Logger.instance(it) }
                Logger.clearActiveLoggers()
            }
        }

        "have a default level of [Level.Info()]" {
            checkAll(Arb.loggers(Arb.list(Arb.string()))) { loggers ->
                loggers.forEach { it.level shouldBeOfClass Level.Info::class }
                Logger.clearActiveLoggers()
            }
        }
    }

    "The list of active loggers should" - {
        "be empty when cleared" {
            checkAll(Arb.loggers(Arb.uniqueStrings())) { loggers ->
                Logger.activeLoggers.size shouldBe loggers.size
                Logger.clearActiveLoggers()
                Logger.activeLoggers.size shouldBe 0
            }
        }
    }
})

/**
 * Returns an arbitrary generator of a list of [Logger] instances based on a given [names] generator
 * of string lists.
 *
 * The returned generator creates a list of [Logger] instances with names generated by [names].
 * Note that creating an instance of a [Logger] automatically adds it to the [Logger.activeLoggers]
 * list.
 * This function can be used to generate a list of loggers for testing purposes.
 *
 * @param names The generator used to create the list of logger names.
 * @return An arbitrary generator of a list of [Logger] instances.
 */
private fun Arb.Companion.loggers(names: Arb<List<String>>) = arbitrary {
    names.bind().map { Logger.instance(it) }
}

/**
 * Returns an arbitrary generator of a list of unique strings.
 * The function generates a set of strings and then converts it to a list, ensuring that
 * there are no repeated strings in the output.
 *
 * @return An arbitrary generator of a list of unique strings.
 */
private fun Arb.Companion.uniqueStrings() = arbitrary {
    set(string()).bind().toList()
}