/*
 * Copyright (c) 2023, Ignacio Slater M.
 * 2-Clause BSD License.
 */


package cl.ravenhill.keen.arbs.prog

import cl.ravenhill.keen.prog.terminals.Constant
import cl.ravenhill.keen.prog.terminals.EphemeralConstant
import cl.ravenhill.keen.prog.terminals.Terminal
import cl.ravenhill.keen.prog.terminals.Variable
import com.univocity.parsers.conversions.Conversions.string
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.choice
import io.kotest.property.arbitrary.double
import io.kotest.property.arbitrary.element
import io.kotest.property.arbitrary.int
import io.kotest.property.arbitrary.string

/**
 * Creates an arbitrary generator for [Constant] objects, which are wrappers for constant values.
 *
 * This generator is useful when you want to generate immutable and repeatable test data within the
 * property-based testing framework provided by Kotest. It ensures that the same value is provided
 * every time it's generated, allowing for consistent test results.
 *
 * @param T The type of the constant value.
 * @param v An [Arb] instance that generates values of type [T].
 *
 * @return An [Arb] instance that produces [Constant] objects with the bound value from the given [v] generator.
 */
fun <T> Arb.Companion.const(v: Arb<T>) = arbitrary {
    Constant(v.bind())
}

/**
 * Provides an arbitrary generator for creating ephemeral constants with predefined value generators.
 *
 * This function is a utility to facilitate property-based testing of structures that utilize
 * ephemeral constants. It selects a random generator function from a provided list and creates
 * an [EphemeralConstant] instance based on it.
 *
 * @param T The type of value to be generated by the ephemeral constant.
 * @param generators A list of lambda functions, each generating an instance of [T].
 *
 * @return An [Arb] (Arbitrary) that yields [EphemeralConstant] instances, each wrapped around
 *         one of the provided generator functions.
 */
fun <T> Arb.Companion.ephemeralConst(vararg generators: () -> T) = element(generators.map { EphemeralConstant(it) })

/**
 * Creates an arbitrary generator for [Variable] instances used in property-based testing.
 *
 * This function generates random [Variable] objects with a random string identifier and
 * a random integer index. The string identifier and index are generated using the [string]`
 * and [int] arbitraries from Kotest, ensuring a wide range of possible values.
 *
 * @param T The type parameter of the [Variable] which is left unspecified, allowing the
 *          generated [Variable] to be of any type.
 *
 * @return An [Arb] (Arbitrary) that produces instances of [Variable] with random identifiers
 *         and indices for use in testing environments where variables are required.
 */
fun <T> Arb.Companion.variable() = arbitrary { Variable<T>(string().bind(), int().bind()) }

/**
 * Generates an arbitrary [Terminal] node for use in property-based testing of tree structures.
 *
 * This generator randomly selects among different types of terminal nodes:
 * - Constant nodes with a fixed integer value.
 * - Ephemeral constant nodes with a dynamic integer value provided by a generator function.
 * - Variable nodes representing variable identifiers within an expression or computation.
 *
 * The choice is made using Kotest's `choice` function which ensures an equal distribution
 * among the different terminal node types.
 *
 * @return An [Arb] (Arbitrary) that produces instances of [Terminal] nodes, suitable for
 *         constructing tree-based genetic programming structures and other hierarchical models
 *         in a testing environment.
 */
fun Arb.Companion.terminal() =
    arbitrary { rs ->
        choice(
            const(double()),                     // Generates a constant terminal node.
            ephemeralConst({ rs.random.nextDouble() }), // Generates an ephemeral constant node.
//            variable()                         // Generates a variable terminal node.
        ).bind()
    }
