/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */


package cl.ravenhill.keen.ga.knapsack

import cl.ravenhill.keen.genetic.chromosomes.Chromosome


/**
 * Represents a chromosome for the knapsack problem in a genetic algorithm.
 *
 * `KnapsackChromosome` is a data class that implements the `Chromosome` interface specifically for the knapsack
 * problem. It holds a list of `KnapsackGene` objects, each representing an item in the knapsack with a pair of weight
 * and value.
 *
 * ## Usage:
 * `KnapsackChromosome` is used in genetic algorithms to represent a potential solution to the knapsack problem,
 * encapsulating a set of items (genes). The `Factory` class facilitates the creation of these chromosomes, enabling
 * easy instantiation with custom gene generation logic.
 *
 * ### Example:
 * ```kotlin
 * val chromosomeFactory = KnapsackChromosome.Factory(10) { KnapsackGene(5 to 10) }
 * val chromosome = chromosomeFactory.make()
 * ```
 * In this example, `chromosomeFactory` is an instance of `KnapsackChromosome.Factory` that creates chromosomes with 10
 * genes, each gene representing an item with a weight of 5 and a value of 10. `chromosome` is an instance of
 * `KnapsackChromosome` created by this factory.
 *
 * @property genes A list of `KnapsackGene` objects representing the items in the knapsack.
 */
data class KnapsackChromosome(override val genes: List<KnapsackGene>) : Chromosome<Pair<Int, Int>, KnapsackGene> {

    /**
     * Creates a new instance of `KnapsackChromosome` with the specified list of `KnapsackGene`.
     *
     * @param genes The list of `KnapsackGene` objects to be included in the new chromosome.
     * @return A new `KnapsackChromosome` instance containing the provided genes.
     */
    override fun duplicateWithGenes(genes: List<KnapsackGene>) = KnapsackChromosome(genes)

    /**
     * Validates if the total weight of items in the chromosome does not exceed the maximum allowable weight.
     *
     * @return `true` if the total weight is within the [UnboundedKnapsackProblem.MAX_WEIGHT] limit; `false` otherwise.
     */
    override fun verify() = sumOf { it.value.second } <= UnboundedKnapsackProblem.MAX_WEIGHT

    /**
     * Provides a string representation of the `KnapsackChromosome`.
     *
     * @return A string that lists all genes in the chromosome, formatted as "(gene1, gene2, ...)".
     */
    override fun toString() = joinToString(", ", "(", ")")

    /**
     * Factory class for creating instances of `KnapsackChromosome`.
     *
     * This factory allows the creation of `KnapsackChromosome` instances with a specified number of genes, each
     * generated using the provided `geneFactory` function.
     *
     * ## Usage:
     * Instantiate this factory with the desired chromosome size and gene factory function, and use the `make` method to
     * create new `KnapsackChromosome` instances.
     *
     * @param size The number of genes in each chromosome to be created.
     * @param geneFactory A lambda function that generates instances of `KnapsackGene`.
     */
    class Factory(override var size: Int, private val geneFactory: () -> KnapsackGene) :
        Chromosome.AbstractFactory<Pair<Int, Int>, KnapsackGene>() {

        /**
         * Generates a new `KnapsackChromosome` instance.
         *
         * Creates a `KnapsackChromosome` with a specified number of genes, each generated by the `geneFactory`
         * function.
         *
         * @return A `KnapsackChromosome` instance populated with genes created by `geneFactory`.
         */
        override fun make() = KnapsackChromosome((0..<size).map { geneFactory() })
    }
}
