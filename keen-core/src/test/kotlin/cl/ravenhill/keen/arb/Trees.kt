/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */


package cl.ravenhill.keen.arb

import cl.ravenhill.keen.annotations.ExperimentalKeen
import cl.ravenhill.keen.utils.trees.Leaf
import cl.ravenhill.keen.utils.trees.Node
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.int
import io.kotest.property.arbitrary.next

/**
 * Creates an arbitrary (randomized) generator for [Node]<[T]> instances with a specified arity range.
 *
 * This function is an extension to the [Arb] companion object, part of the Keen library's test data generation
 * utilities. It is designed to generate random `Node<T>` instances, primarily for testing purposes, where each
 * node has a randomly determined arity (number of child nodes) within a specified range.
 *
 * ## Usage:
 * - This generator is useful in scenarios where you need to test functions or algorithms that operate on tree-like
 *   structures and require random nodes with varying arities.
 * - Particularly beneficial in property-based testing where diverse inputs can help in validating the robustness
 *   of algorithms.
 *
 * ## Example:
 * ```kotlin
 * val nodeGen = Arb.node<Int>()
 * val randomNode = nodeGen.bind() // Generates a random Node<Int> instance
 * ```
 *
 * ## Experimental API Notice:
 * The function is marked with `@OptIn(ExperimentalKeen::class)` indicating that it uses experimental features
 * from the Keen library. The API is subject to change and should be used with caution in production environments.
 *
 * @param T The type parameter for the nodes generated by this arbitrary.
 * @param arity An [Arb]<[Int]> that defines the range of possible arity values for the generated nodes. By default,
 *   this range is set from 0 to 10. This value determines how many child nodes each generated [Node]<[T]> instance
 *   can have.
 * @return Returns an [Arb]<[Node]<[T]>> which is an arbitrary instance capable of generating `Node<T>` objects with the
 *   specified arity characteristics.
 */
@OptIn(ExperimentalKeen::class)
fun <T> Arb.Companion.node(arity: Arb<Int> = int(0..10)): Arb<Node<T>> = arbitrary {
    val boundArity = arity.bind()
    object : Node<T> {
        override val arity: Int
            get() = boundArity
    }
}

/**
 * Creates an arbitrary generator for [Leaf]<[T]> instances.
 *
 * This function, annotated with `@OptIn(ExperimentalKeen::class)`, extends the [Arb.Companion] object to generate
 * instances of `Leaf<T>`. Each `Leaf` instance contains a value of type `T`, which is generated by the provided
 * arbitrary generator ([contents]). This function is particularly useful in constructing tree-like structures or other
 * hierarchical data models in which leaves hold values of a specific type.
 *
 * ## Usage:
 * Utilize this function in property-based testing scenarios where you need to generate `Leaf` objects with specific
 * content. It allows for the creation of diverse and varied `Leaf` instances, each containing a value produced by the
 * `contents` arbitrary generator.
 *
 * ### Example:
 * ```kotlin
 * val intLeafGen = Arb.leaf(Arb.int())
 * val randomLeaf = intLeafGen.bind() // Generates a Leaf<Int> instance with a random integer
 * ```
 * In this example, `intLeafGen` is an arbitrary that generates `Leaf<Int>` instances, where each leaf contains
 * a randomly generated integer.
 *
 * @param T The type parameter for the contents of the `Leaf` instances.
 * @param contents An [Arb]<[T]> that generates the content for each `Leaf` instance.
 * @return An [Arb]<[Leaf]<[T]>> for generating `Leaf` instances with contents of type `T`.
 */
@OptIn(ExperimentalKeen::class)
fun <T> Arb.Companion.leaf(contents: Arb<T>): Arb<Leaf<T>> = arbitrary {
    object : Leaf<T> {
        override val contents: T?
            get() = contents.next()
    }
}
