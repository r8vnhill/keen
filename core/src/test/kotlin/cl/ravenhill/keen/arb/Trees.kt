/*
 * Copyright (c) 2023, Ignacio Slater M.
 * 2-Clause BSD License.
 */


package cl.ravenhill.keen.arb

import cl.ravenhill.keen.ExperimentalKeen
import cl.ravenhill.keen.utils.trees.Node
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.int

/**
 * Creates an arbitrary (randomized) generator for [Node]<[T]> instances with a specified arity range.
 *
 * This function is an extension to the [Arb] companion object, part of the Keen library's test data generation
 * utilities. It is designed to generate random `Node<T>` instances, primarily for testing purposes, where each
 * node has a randomly determined arity (number of child nodes) within a specified range.
 *
 * ## Usage:
 * - This generator is useful in scenarios where you need to test functions or algorithms that operate on tree-like
 *   structures and require random nodes with varying arities.
 * - Particularly beneficial in property-based testing where diverse inputs can help in validating the robustness
 *   of algorithms.
 *
 * ## Example:
 * ```kotlin
 * val nodeGen = Arb.node<Int>()
 * val randomNode = nodeGen.bind() // Generates a random Node<Int> instance
 * ```
 *
 * ## Experimental API Notice:
 * The function is marked with `@OptIn(ExperimentalKeen::class)` indicating that it uses experimental features
 * from the Keen library. The API is subject to change and should be used with caution in production environments.
 *
 * @param T The type parameter for the nodes generated by this arbitrary.
 * @param arity An [Arb]<[Int]> that defines the range of possible arity values for the generated nodes. By default,
 *   this range is set from 0 to 10. This value determines how many child nodes each generated [Node]<[T]> instance
 *   can have.
 * @return Returns an [Arb]<[Node]<[T]>> which is an arbitrary instance capable of generating `Node<T>` objects with the
 *   specified arity characteristics.
 */
@OptIn(ExperimentalKeen::class)
fun <T> Arb.Companion.node(arity: Arb<Int> = int(0..10)): Arb<Node<T>> = arbitrary {
    val boundArity = arity.bind()
    object : Node<T> {
        override val arity: Int
            get() = boundArity
    }
}
